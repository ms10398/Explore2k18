<!DOCTYPE html>
<html lang='en'>

<head>
  <meta charset='UTF-8' />
  <meta name='viewport' content='width=device-width, initial-scale=1.0' />
  <meta http-equiv='X-UA-Compatible' content='ie=edge' />
  <title>Explore 2k18</title>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/pagePiling.js/1.5.5/jquery.pagepiling.min.css" />
  <style>
    iframe {
      height: 95%;
      width: 100%;
      position: absolute;
      top: 0;
      margin: 0 auto;
      left: 0;
      border:none;
      padding-top: 15px;
    }
    body {
      display: flex;
    }

    #particles {
      position: fixed;
      height: 100%;
      width: 100%;
      overflow: hidden;
      z-index: 1;
    }

    #intro {
      position: absolute;
      top: 25%;
      width: 100%;
      text-align: center;
    }

    .logo {
      width: 35%;
    }

    .liquid-button {
      margin: auto;
    }

    .liquid-button path {
      cursor: pointer;
    }

    .btn.is-open~.description {
      opacity: 0;
    }

    .btn {
      display: block;
      position: relative;
      margin: 0 auto;
      padding-right: 5%;
      width: 200px;
      height: 80px;
      -webkit-transition: width 0.8s cubic-bezier(0.23, 1, 0.32, 1), height 0.8s cubic-bezier(0.23, 1, 0.32, 1), -webkit-transform 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      transition: width 0.8s cubic-bezier(0.23, 1, 0.32, 1), height 0.8s cubic-bezier(0.23, 1, 0.32, 1), -webkit-transform 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      transition: width 0.8s cubic-bezier(0.23, 1, 0.32, 1), height 0.8s cubic-bezier(0.23, 1, 0.32, 1), transform 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      transition: width 0.8s cubic-bezier(0.23, 1, 0.32, 1), height 0.8s cubic-bezier(0.23, 1, 0.32, 1), transform 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275), -webkit-transform 0.8s cubic-bezier(0.175, 0.885, 0.32, 1.275);
      -webkit-transform-style: preserve-3d;
      transform-style: preserve-3d;
      -webkit-transform-origin: 50% 50%;
      transform-origin: 50% 50%;
      text-align: center;
    }

    .btn-front {
      display: block;
      position: absolute;
      line-height: 80px;
      cursor: pointer;
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
      -webkit-transition: background 0.15s ease, line-height 0.8s cubic-bezier(0.23, 1, 0.32, 1);
      transition: background 0.15s ease, line-height 0.8s cubic-bezier(0.23, 1, 0.32, 1);
    }


    .btn.is-open .btn-front {
      pointer-events: none;
      line-height: 160px;
    }

    .btn-back {
      position: absolute;
      display: none;
      width: 100%;
      height: 100%;
      background-color: #E5E4E4;
      color: #222;
      -webkit-transform: translateZ(-2px) rotateX(180deg);
      transform: translateZ(-2px) rotateX(180deg);
      /* overflow: hidden; */
      -webkit-transition: -webkit-box-shadow 0.8s ease;
      transition: -webkit-box-shadow 0.8s ease;
      transition: box-shadow 0.8s ease;
      transition: box-shadow 0.8s ease, -webkit-box-shadow 0.8s ease;
    }

    .btn-back p {
      margin-top: 27px;
      margin-bottom: 25px;
    }

    .btn-back button {
      padding: 12px 20px;
      width: 30%;
      margin: 0 5px;
      background-color: transparent;
      border: 0;
      border-radius: 2px;
      font-size: 1em;
      cursor: pointer;
      -webkit-appearance: none;
      -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
      -webkit-transition: background 0.15s ease;
      transition: background 0.15s ease;
    }

    .btn-back button:focus {
      outline: 0;
    }

    .btn-back button.yes {
      background-color: #2196F3;
      color: #fff;
    }

    .btn-back button.yes:hover {
      background-color: #51adf6;
    }

    .btn-back button.no {
      color: #2196F3;
    }

    .btn-back button.no:hover {
      background-color: #ddd;
    }

    .btn.is-open .btn-back {
      -webkit-box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.4);
    }

    .btn[data-direction="left"] .btn-back,
    .btn[data-direction="right"] .btn-back {
      -webkit-transform: translateZ(-2px) rotateY(180deg);
      transform: translateZ(-2px) rotateY(180deg);
    }

    .btn.is-open {
      width: 400px;
      height: 160px;
    }

    .btn[data-direction="top"].is-open {
      -webkit-transform: rotateX(180deg);
      transform: rotateX(180deg);
    }

    .btn[data-direction="right"].is-open {
      -webkit-transform: rotateY(180deg);
      transform: rotateY(180deg);
    }

    .btn[data-direction="bottom"].is-open {
      -webkit-transform: rotateX(-180deg);
      transform: rotateX(-180deg);
    }

    .btn[data-direction="left"].is-open {
      -webkit-transform: rotateY(-180deg);
      transform: rotateY(-180deg);
    }

    #gradient {
      width: 100%;
      height: 100%;
      padding: 0px;
      margin: 0px;
    }

    a {
      text-decoration: none;
      color: #333;
    }

    figure {
      margin: 0;
    }

    .tile {
      width: 250px;
      height: 350px;
      margin: 2em;
      position: relative;
      float: left;
    }

    .tile .front,
    .tile .back {
      display: block;
      top: 0;
      bottom: 0;
      left: 0;
      right: 0;
      width: 250px;
      height: 350px;
      position: absolute;
      overflow: hidden;
      text-align: center;
    }

    .tile h3,
    .tile p,
    .tile a {
      padding: 0 20px;
    }

    .tile img {
      max-height: 130px;
    }

    .tile .front {
      background: #962D3E;
      transition: all .5s ease-in-out;
      z-index: 2;
    }

    .tile .front h3 {
      font-size: 2em;
      color: white;
      text-shadow: 0 0 5px #000;
      margin-top: -1.5em;
      margin-bottom: 1.5em;
    }

    .tile .back {
      background: #374140;
      color: white;
      z-index: 1;
      padding-top: 50px;
      height: 300px;
    }

    .tile .back h3 {
      font-size: 1.5em;
      color: white;
      margin-top: 1em;
      margin-bottom: 1em;
    }

    .tile .back a {
      display: block;
      font-size: 1.2em;
      color: white;
      border-top: 1px solid #ffcc00;
      margin: 0 20px;
      padding: .5em 0;
    }

    .tile:hover .front {
      top: -300px;
      transform: rotate(2deg);
    }

    #myVideo {
      position: absolute;
      right: 0;
      bottom: 0;
      min-width: 100%;
      min-height: 100%;
      z-index: -100;
    }

    .wrapper {
      width: 80%;
      margin: 0 auto;
      max-width: 80rem;
      z-index: 4;
    }

    .cols {
      display: -webkit-box;
      display: -ms-flexbox;
      display: flex;
      -ms-flex-wrap: wrap;
      flex-wrap: wrap;
      -webkit-box-pack: center;
      -ms-flex-pack: center;
      justify-content: center;
      width: 100%;
    }

    .col {
      width: calc(25% - 2rem);
      margin: 1rem;
      cursor: pointer;
    }

    .container {
      -webkit-transform-style: preserve-3d;
      transform-style: preserve-3d;
      -webkit-perspective: 1200px;
      perspective: 1200px;
    }

    .front,
    .back {
      background-size: cover;
      background-position: center;
      -webkit-transition: -webkit-transform .7s cubic-bezier(0.4, 0.2, 0.2, 1);
      transition: -webkit-transform .7s cubic-bezier(0.4, 0.2, 0.2, 1);
      -o-transition: transform .7s cubic-bezier(0.4, 0.2, 0.2, 1);
      transition: transform .7s cubic-bezier(0.4, 0.2, 0.2, 1);
      transition: transform .7s cubic-bezier(0.4, 0.2, 0.2, 1), -webkit-transform .7s cubic-bezier(0.4, 0.2, 0.2, 1);
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      text-align: center;
      min-height: 280px;
      height: auto;
      border-radius: 10px;
      color: #fff;
      font-size: 1.5rem;
    }

    .back {
      background: #cedce7;
      background: -webkit-linear-gradient(45deg, #cedce7 0%, #596a72 100%);
      background: -o-linear-gradient(45deg, #cedce7 0%, #596a72 100%);
      background: linear-gradient(45deg, #cedce7 0%, #596a72 100%);
    }

    .front:after {
      position: absolute;
      top: 0;
      left: 0;
      z-index: 1;
      width: 100%;
      height: 100%;
      content: '';
      display: block;
      opacity: .6;
      background-color: #000;
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden;
      border-radius: 10px;
    }

    .container:hover .front,
    .container:hover .back {
      -webkit-transition: -webkit-transform .7s cubic-bezier(0.4, 0.2, 0.2, 1);
      transition: -webkit-transform .7s cubic-bezier(0.4, 0.2, 0.2, 1);
      -o-transition: transform .7s cubic-bezier(0.4, 0.2, 0.2, 1);
      transition: transform .7s cubic-bezier(0.4, 0.2, 0.2, 1);
      transition: transform .7s cubic-bezier(0.4, 0.2, 0.2, 1), -webkit-transform .7s cubic-bezier(0.4, 0.2, 0.2, 1);
    }

    .back {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
    }

    .inner {
      -webkit-transform: translateY(-50%) translateZ(60px) scale(0.94);
      transform: translateY(-50%) translateZ(60px) scale(0.94);
      top: 50%;
      position: absolute;
      left: 0;
      width: 100%;
      padding: 2rem;
      -webkit-box-sizing: border-box;
      box-sizing: border-box;
      outline: 1px solid transparent;
      -webkit-perspective: inherit;
      perspective: inherit;
      z-index: 2;
    }

    .container .back {
      -webkit-transform: rotateY(180deg);
      transform: rotateY(180deg);
      -webkit-transform-style: preserve-3d;
      transform-style: preserve-3d;
    }

    .container .front {
      -webkit-transform: rotateY(0deg);
      transform: rotateY(0deg);
      -webkit-transform-style: preserve-3d;
      transform-style: preserve-3d;
    }

    .container:hover .back {
      -webkit-transform: rotateY(0deg);
      transform: rotateY(0deg);
      -webkit-transform-style: preserve-3d;
      transform-style: preserve-3d;
    }

    .container:hover .front {
      -webkit-transform: rotateY(-180deg);
      transform: rotateY(-180deg);
      -webkit-transform-style: preserve-3d;
      transform-style: preserve-3d;
    }

    .front .inner p {
      font-size: 2rem;
      margin-bottom: 2rem;
      position: relative;
    }

    .front .inner p:after {
      content: '';
      width: 4rem;
      height: 2px;
      position: absolute;
      background: #C6D4DF;
      display: block;
      left: 0;
      right: 0;
      margin: 0 auto;
      bottom: -.75rem;
    }

    .front .inner span {
      color: rgba(255, 255, 255, 0.7);
      font-family: 'Montserrat';
      font-weight: 300;
    }

    @media screen and (max-width: 64rem) {
      .col {
        width: calc(33.333333% - 2rem);
      }
    }

    @media screen and (max-width: 48rem) {
      .col {
        width: calc(50% - 2rem);
      }
    }

    @media screen and (max-width: 32rem) {
      .col {
        width: 100%;
        margin: 0 0 2rem 0;
      }
    }
    .section-title {
            color: #fff0ce;
        }

        div.separator {
            margin-bottom: 5px;
        }

        form input {
            margin-bottom: 10px;
            margin-top: 10px;
            width: 25%;
            margin: 5px;
        }

        input.gender #rlabel,
        div#events #rlabel4,
        #rlabel5 {
            float: left;
        }

        .g-key11 {
            width: 25%;
            float: left;
            padding: 2px;
            display: inline-block;
        }

        .g-value11 {
            width: 75%;
            display: inline-block;
        }

        .g-value1,
        .g-value2 {
            width: 37.5%;
            display: inline-block;
        }

        .g-key22 {
            width: 45%;
            float: left;
            display: inline-block;
        }

        .g-value22 {
            width: 55%;
            display: inline-block;
        }

        .g-value3,
        .g-value4 {
            width: 27.5%;
            display: inline-block;
        }

        body {
            min-width: 356px;
        }

        .g-key33,
        .g-key44 {
            width: 25%;
            float: left;
            display: inline-block;
        }

        .g-value33,
        .g-value44 {
            width: 75%;
            display: inline-block;
        }

        #events select {
            width: 100%;
        }

        .select-style {
            padding: 2px 0px 2px 2px;
            margin: 0;
            border: 1px solid #ccc;
            border-radius: 3px;
            overflow: hidden;
            background: #fff url("/images/arrowdown.gif") no-repeat 95% 50%;
        }

        .select-style select {
            cursor: pointer;
            padding: 5px 8px;
            width: 100%;
            border: none;
            box-sizing: border-box;
            box-shadow: none;
            background-color: transparent;
            background-image: none;
            -webkit-appearance: none;
            -moz-appearance: none;
        }

        .select-style select:focus {
            outline: none;
        }

        #rlabel4,
        #rlabel5 {
            padding-top: 1.5%;
            padding-bottom: 1.5%;
            padding-left: 1.5%;
            box-sizing: border-box;
            vertical-align: top;
        }

        .g-key55 {
            width: 23%;
            float: left;
            display: inline-block;
            box-sizing: border-box;
            padding-top: 1.5%;
            padding-bottom: 1.5%;
        }

        .g-value5,
        .g-value6 {
            width: 25%;
            display: inline-block;
            box-sizing: border-box;
        }

        .g-key66 {
            width: 24%;
            display: inline-block;
            box-sizing: border-box;
            padding-top: 1.5%;
            padding-bottom: 1.5%;
        }

        form #events,
        .Accomodation,
        #days {
            margin-top: 10px;
        }

        @media only screen and (max-width: 960px) and (min-width: 755px) {
            .Accomodation {}
        }
        /*progressbar*/

        #progressbar {
            padding: 0;
            margin-bottom: 30px;
            overflow: hidden;
            text-align: center;
            /*CSS counters to number the steps*/
            counter-reset: step;
        }

        #progressbar li {
            list-style-type: none;
            color: white;
            text-transform: uppercase;
            font-size: 0.7em;
            width: 33.33%;
            float: left;
            position: relative;
        }

        #progressbar li:before {
            content: counter(step);
            counter-increment: step;
            width: 20px;
            line-height: 20px;
            display: block;
            font-size: 10px;
            color: #333;
            background: white;
            border-radius: 3px;
            margin: 0 auto 5px auto;
        }
        /*progressbar connectors*/

        #progressbar li:after {
            content: '';
            width: 100%;
            height: 2px;
            background: white;
            position: absolute;
            left: -50%;
            top: 9px;
            z-index: -1;
            /*put it behind the numbers*/
        }

        #progressbar li:first-child:after {
            /*connector not needed before the first step*/
            content: none;
        }
        /*marking active/completed steps green*/
        /*The number of the step and the connector before it = green*/

        #progressbar li.active:before,
        #progressbar li.active:after {
            background: #000;
            color: white;
        }
        /*form*/

        #retro-mail-form fieldset {
            background: #4b4f55;
            border: 0 none;
            border-radius: 3px;
            box-shadow: 0 0 10px 10px rgba(0, 0, 0, 0.4);
            padding: 20px 30px;
            box-sizing: border-box;
            margin: 0 10%;
            /*stacking fieldsets above each other*/
            position: relative;
        }

        @media only screen and (min-width: 960px) {
            #retro-mail-form fieldset {
                width: 90%;
                margin: 0 auto;
            }
        }

        @media only screen and (max-width: 960px) and (min-width: 500px) {
            #retro-mail-form fieldset {
                width: 90%;
                padding: 15px 25px;
                margin: 0 auto;
            }
        }

        @media only screen and (max-width: 500px) {
            #retro-mail-form fieldset {
                width: 98%;
                padding: 10px 20px;
                margin: 0 auto;
            }
        }
        /*Hide all except first fieldset*/

        #retro-mail-form fieldset:not(:first-of-type) {
            display: none;
        }

        #retro-mail-form .action-button:hover,
        #retro-mail-form .action-button:focus {
            box-shadow: 0 0 0 2px white, 0 0 0 3px #061b4a;
        }

        .notice {
            position: relative;
            margin: 0.5em;
            background: #090909;
            padding: 1em 1em 1em 2em;
            border-left: 4px solid #DDD;
            box-shadow: 0 1px 1px rgba(0, 0, 0, 0.125);
        }

        .notice:before {
            position: absolute;
            top: 50%;
            margin-top: -17px;
            left: -17px;
            background-color: #DDD;
            color: #FFF;
            width: 30px;
            height: 30px;
            border-radius: 100%;
            text-align: center;
            line-height: 30px;
            font-weight: bold;
            font-family: Georgia;
            text-shadow: 1px 1px rgba(0, 0, 0, 0.5);
        }

        .info {
            border-color: #0074D9;
        }

        .info:before {
            /*content: "i";*/
            background-color: #0074D9;
        }

        .success {
            border-color: #2ECC40;
        }

        .success:before {
            /*content: "√";*/
            background-color: #2ECC40;
        }

        .warning {
            border-color: #FFDC00;
        }

        .warning:before {
            /*content: "!";*/
            background-color: #FFDC00;
        }

        .error {
            border-color: #FF4136;
            color: #FF4136;
        }

        .error:before {
            /*content: "X";*/
            background-color: #FF4136;
        }

        .hidden {
            display: none;
        }

        @media only screen and (max-width: 960px) and (min-width: 765px) {
            #rlabel5,
            #rlabel4 {
                padding-top: 0px;
                width: 100%;
                float: none;
            }
        }

        html {
            height: 100%;
        }

        body {
            min-height: 100%;
        }

        fieldset {
            min-height: 40%;
        }

        .section-subtitle {
            font-family: monospace, "Lucida Console", "Courier New";
        }

        #people {
            margin-top: 10px;
        }

        .g-key22,
        .g-value22,
        .g-value5,
        .g-value6 {
            width: 100%;
        }

        #retro-mail-form {
          display: flex;
          flex-direction: row;;
          flex-wrap: wrap;
          text-align: center;
        }

        #fieldSet_2 {
          display: flex;
          flex-direction: row;
          flex-wrap: wrap;
        }

        @media only screen and (max-width: 400px) {
            .g-value22 {
                width: 100%;
            }
        }
        /*headings*/

        .fs-title {
            font-size: 20px;
            text-transform: uppercase;
            margin-bottom: 10px;
            text-align: center;
            width: 100%;
        }

        @media only screen and (max-width: 960px) and (min-width: 500px) {
            .g-value44 {
                width: 100%;
            }
        }

  </style>
</head>

<body>
  <div id="pagepiling">

    <div  class="section pp-scrollable" id="particles">

      <video autoplay loop id="myVideo">
        <source src="vid/intro.mp4" type="video/mp4">
      </video>

      <div id='intro'>
        <img src="img/Explore.png" alt="" class="logo" id="logo">
        <br/>
        <br/>
        <br/>


        <div class="btn">
          <div class="btn-back">
            <!-- <form name="submit-to-google-sheet">
              <input name="email" type="email" placeholder="Email" required>
              <button type="submit">Send</button>
            </form> -->
            <form action="" method="" id="retro-mail-form" name="submit-to-google-sheet">
                           <ul id="progressbar">
                             <center>
                               <li class="active">Personal Details</li>
                               <li>Team Details</li>
                               <li>Submit</li>
                             </center>
                           </ul>
                           <fieldset id='fieldSet_1'>
                               <label id="icon" for="name"><i class="fa fa-user"></i></label>
                               <input type="text" name="name" id="name" placeholder="Name" required onchange="return nvalidation()" />
                               <div class="notice hidden error" id="name_error">Names can't include special symbols or numbers</div>
                               <label id="icon" for="fname"><i class="fa fa-user-md"></i></label>
                               <input type="text" name="fname" id="fname" placeholder="Father's Name" required onchange="return fnvalidation()" />
                               <div class="notice hidden error" id="fname_error">Names can't include special symbols or numbers</div>
                               <div class="gender">
                                   <label id="rlabel" class="g-key11">Gender</label>
                                   <div class="g-value11">
                                       <div class="g-value1">
                                           <input type="radio" value="male" id="male" name="gender" checked />
                                           <label for="male" class="radio">Male</label>
                                       </div>
                                       <div class="g-value2">
                                           <input type="radio" value="female" id="female" name="gender" />
                                           <label for="female" class="radio">Female</label>
                                       </div>
                                   </div>
                               </div>
                               <label id="icon" for="email"><i class="fa fa-envelope-o"></i></label>
                               <input type="email" name="emailId" id="email" placeholder="Email" required onchange="return email_val()" />
                               <div class="notice hidden error" id="email_error">Email must be valid in the form of x@domain.com</div>
                               <label id="icon" for="phone"><i class="fa fa-phone"></i></label>
                               <input type="text" name="phoneNumber" id="phone" placeholder="Mobile Number (10 Digits Only)" required onchange="return mob_val()" />
                               <div class="notice hidden error" id="mob_error">Make sure it's a 10 digit number' </div>
                               <label id="icon" for="name"><i class="fa fa-building-o"></i></label>
                               <input type="text" name="college" id="college" placeholder="College/ University" required onchange="return cnvalidation()" />
                               <div class="notice hidden error" id="cname_error">College names can't include special symbols or numbers</div>
                               <div id="events">
                                   <label id="rlabel4" class="g-key33">Events</label>
                                   <div class="g-value44 select-style">
                                       <select id="evento" name="events" required onchange="return event_validation()">
                                           <option value="">Select your event</option>
                                                                                           <option value="1001">
                                                   Foot it out Rs. 3000 Per Team                                                 </option>
                                                                                               <option value="1002">
                                                   Charisma Rs. 3000 Per Team                                                 </option>
                                                                                               <option value="1003">
                                                   Art Alley  Rs. 200  per Head                                                </option>
                                                                                               <option value="1004">
                                                   Deception Rs. 600 per Team                                                </option>
                                                                                               <option value="1005">
                                                   Paintball Rs. 600 per Team                                                </option>
                                                                                               <option value="1006">
                                                   Splitsvilla Rs. 400 per couple                                                </option>
                                                                                               <option value="1007">
                                                   Beg, Borrow Steal Rs. 200/- per head                                                </option>
                                                                                               <option value="1008">
                                                   Deception Rs. 600 per team                                                </option>
                                                                                               <option value="1009">
                                                   Snaptext Rs. 100 per head                                                </option>
                                                                                               <option value="1010">
                                                   Lan Gaming (FIFA 17) Rs. 200 per head                                                </option>
                                                                                               <option value="1011">
                                                   Lan Gaming (NFS MW) Rs. 200 per head                                                </option>
                                                                                               <option value="1012">
                                                   Lan Gaming (CS 1.6) Rs. 500                                                </option>
                                                                                               <option value="1013">
                                                   Laser Maze Rs. 150                                                </option>
                                                                                               <option value="1014">
                                                   Hogathon Rs. 100  per head                                                </option>
                                                                                               <option value="1015">
                                                   Pool Tournament Rs. 200 Per Head                                                </option>
                                                                                               <option value="1016">
                                                   The Escapade Rs. 100 Per Head                                                </option>
                                                                                               <option value="1017">
                                                   Motion Gaming Rs. 100 Per Head                                                </option>
                                                                                       </select>
                                   </div>
                               </div>
                               <div class="notice hidden error" id="event_error">Please select an event from the above list</div>
                               <div id="member_ct_outer">
                                   <label id="rlabel5" class="g-key33">Members</label>
                                   <div class="member_ct select-style g-value44" id="member_count">
                                       <select id="member_select" name="member_select">
                                           <option value="1"> 1 </option>
                                       </select>
                                   </div>
                               </div>
                               <input type="button" name="next" class="button next action-button" value="Next" id="next_1">
                           </fieldset>

                           <fieldset id='fieldSet_2'>
                               <h2 class="fs-title">
                                   <label id="rlabel3">Team Member Details</label>
                               </h2>
                               <!--Set g-value44 display: none and insert select inside g-value44-->
                               <div class="g-value44" id="g-value-mem">
                               </div>

                               <div class="notice hidden error" id="member_error">Form has returned errors. Please cross verify the form.</div>
                               <input type="button" name="previous" id="previous1" class="button previous action-button" value="Previous" style="">
                               <input type="button" name="next" class="button next action-button" value="Next" id="next_2">
                           </fieldset>


                               <!--<input type="button" id='previous2' name="previous" class="button previous action-button" value="Previous" style="">
                               --><input id="send" type="submit" value="Submit" class="button">
                           </fieldset>

                       </form>

          </div>

          <div class="btn-front">
            <svg class="liquid-button" data-text="Register" data-force-factor="0.1" data-layer-1-viscosity="0.5" data-layer-2-viscosity="0.4" data-layer-1-mouse-force="400" data-layer-2-mouse-force="500" data-layer-1-force-limit="1" data-layer-2-force-limit="2" data-color1="#4DE7BF"
              data-color2="#0A3FC7" data-color3="#2A62F4"></svg>
          </div>
        </div>
      </div>
    </div>
    <div class="section" style="background: url(img/back.jpg)" >
      <h1 style="margin:0 auto; color:white;margin-bottom:30px"><center>Events</center></h1>
      <div class="wrapper">
        <div class="cols">
          <div class="col" data-aos="fade-up" ontouchstart="this.classList.toggle('hover');">
            <div class="container">
              <div class="front" style="background-image: url(https://unsplash.it/500/500/)">
                <div class="inner">
                  <p>Diligord</p>
                  <span>Lorem ipsum</span>
                </div>
              </div>
              <div class="back">
                <div class="inner">
                  <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Alias cum repellat velit quae suscipit c.</p>
                </div>
              </div>
            </div>
          </div>
          <div class="col" data-aos="fade-up" ontouchstart="this.classList.toggle('hover');">
            <div class="container">
              <div class="front" style="background-image: url(https://unsplash.it/511/511/)">
                <div class="inner">
                  <p>Rocogged</p>
                  <span>Lorem ipsum</span>
                </div>
              </div>
              <div class="back">
                <div class="inner">
                  <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Alias cum repellat velit quae suscipit c.</p>
                </div>
              </div>
            </div>
          </div>
          <div class="col" data-aos="fade-up" ontouchstart="this.classList.toggle('hover');">
            <div class="container">
              <div class="front" style="background-image: url(https://unsplash.it/502/502/)">
                <div class="inner">
                  <p>Strizzes</p>
                  <span>Lorem ipsum</span>
                </div>
              </div>
              <div class="back">
                <div class="inner">
                  <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Alias cum repellat velit quae suscipit c.</p>
                </div>
              </div>
            </div>
          </div>
          <div class="col" data-aos="fade-up" ontouchstart="this.classList.toggle('hover');">
            <div class="container">
              <div class="front" style="background-image: url(https://unsplash.it/503/503/)">
                <div class="inner">
                  <p>Clossyo</p>
                  <span>Lorem ipsum</span>
                </div>
              </div>
              <div class="back">
                <div class="inner">
                  <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Alias cum repellat velit quae suscipit c.</p>
                </div>
              </div>
            </div>
          </div>
          <div class="col" data-aos="fade-up" ontouchstart="this.classList.toggle('hover');">
            <div class="container">
              <div class="front" style="background-image: url(https://unsplash.it/504/504/">
                <div class="inner">
                  <p>Rendann</p>
                  <span>Lorem ipsum</span>
                </div>
              </div>
              <div class="back">
                <div class="inner">
                  <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Alias cum repellat velit quae suscipit c.</p>
                </div>
              </div>
            </div>
          </div>
          <div class="col" data-aos="fade-up" ontouchstart="this.classList.toggle('hover');">
            <div class="container">
              <div class="front" style="background-image: url(https://unsplash.it/505/505/)">
                <div class="inner">
                  <p>Reflupper</p>
                  <span>Lorem ipsum</span>
                </div>
              </div>
              <div class="back">
                <div class="inner">
                  <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Alias cum repellat velit quae suscipit c.</p>
                </div>
              </div>
            </div>
          </div>
          <div class="col" data-aos="fade-up" ontouchstart="this.classList.toggle('hover');">
            <div class="container">
              <div class="front" style="background-image: url(https://unsplash.it/506/506/)">
                <div class="inner">
                  <p>Acirassi</p>
                  <span>Lorem ipsum</span>
                </div>
              </div>
              <div class="back">
                <div class="inner">
                  <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Alias cum repellat velit quae suscipit c.</p>
                </div>
              </div>
            </div>
          </div>
          <div class="col" data-aos="fade-up" ontouchstart="this.classList.toggle('hover');">
            <div class="container">
              <div class="front" style="background-image: url(https://unsplash.it/508/508/)">
                <div class="inner">
                  <p>Sohanidd</p>
                  <span>Lorem ipsum</span>
                </div>
              </div>
              <div class="back">
                <div class="inner">
                  <p>Lorem ipsum, dolor sit amet consectetur adipisicing elit. Alias cum repellat velit quae suscipit c.</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <div class="section" id="gradient">
        <iframe src="hello.html" frameborder="0" allowtransparency="true" seamless="seamless"></iframe>
    </div>
    <div class="section">Section 4 </div>
  </div>
  <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pagePiling.js/1.5.5/jquery.pagepiling.min.js"></script>
  <script>
    $(document).ready(function() {
      $('#pagepiling').pagepiling({
        direction: 'horizontal',
        verticalCentered: true,
        sectionsColor: ['#16a085', '#4BBFC3', '#7BAABE', 'whitesmoke', '#000'],
        anchors: [],
        scrollingSpeed: 700,
        easing: 'swing',
        loopBottom: false,
        loopTop: false,
        css3: true,
        navigation: {
          'textColor': '#000',
          'bulletsColor': '#000',
          'position': 'right',
          'tooltips': []
        },
        normalScrollElements: null,
        normalScrollElementTouchThreshold: 5,
        touchSensitivity: 5,
        keyboardScrolling: true,
        sectionSelector: '.section',
        animateAnchor: false,
        onLeave: function(index, nextIndex, direction) {},
        afterLoad: function(anchorLink, index) {},
        afterRender: function() {},
      });
    });
  </script>
  <script type='text/javascript' src='./js/jquery.particleground.min.js'></script>
  </script>
  <script type="text/javascript">

    const scriptURL = 'https://script.google.com/macros/s/AKfycbyvj1efVV804qQWeMWmjfdb0so7X4cHBeX_qUITuWXrd7Gex-kg/exec'
      const form = document.forms['submit-to-google-sheet']

      form.addEventListener('submit', e => {
        e.preventDefault()
        fetch(scriptURL, { method: 'POST', body: new FormData(form) })
          .then(response => console.log('Success!', response))
          .catch(error => console.error('Error!', error.message))
      })

    const LiquidButton = class LiquidButton {
      constructor(svg) {
        const options = svg.dataset;
        this.id = this.constructor.id || (this.constructor.id = 1);
        this.constructor.id++;
        this.xmlns = 'http://www.w3.org/2000/svg';
        this.tension = options.tension * 1 || 0.4;
        this.width = options.width * 1 || 200;
        this.height = options.height * 1 || 50;
        this.margin = options.margin || 40;
        this.hoverFactor = options.hoverFactor || -0.1;
        this.gap = options.gap || 5;
        this.debug = options.debug || false;
        this.forceFactor = options.forceFactor || 0.2;
        this.color1 = options.color1 || '#36DFE7';
        this.color2 = options.color2 || '#8F17E1';
        this.color3 = options.color3 || '#BF09E6';
        this.textColor = options.textColor || '#FFFFFF';
        this.text = options.text || 'Button';
        this.svg = svg;
        this.layers = [{
          points: [],
          viscosity: 0.5,
          mouseForce: 100,
          forceLimit: 2,
        }, {
          points: [],
          viscosity: 0.8,
          mouseForce: 150,
          forceLimit: 3,
        }];
        for (let layerIndex = 0; layerIndex < this.layers.length; layerIndex++) {
          const layer = this.layers[layerIndex];
          layer.viscosity = options['layer-' + (layerIndex + 1) + 'Viscosity'] * 1 || layer.viscosity;
          layer.mouseForce = options['layer-' + (layerIndex + 1) + 'MouseForce'] * 1 || layer.mouseForce;
          layer.forceLimit = options['layer-' + (layerIndex + 1) + 'ForceLimit'] * 1 || layer.forceLimit;
          layer.path = document.createElementNS(this.xmlns, 'path');
          this.svg.appendChild(layer.path);
        }
        this.wrapperElement = options.wrapperElement || document.body;
        if (!this.svg.parentElement) {
          this.wrapperElement.append(this.svg);
        }

        this.svgText = document.createElementNS(this.xmlns, 'text');
        this.svgText.setAttribute('x', '50%');
        this.svgText.setAttribute('y', '50%');
        this.svgText.setAttribute('dy', ~~(this.height / 8) + 'px');
        this.svgText.setAttribute('font-size', ~~(this.height / 3));
        this.svgText.style.fontFamily = 'sans-serif';
        this.svgText.setAttribute('text-anchor', 'middle');
        this.svgText.setAttribute('pointer-events', 'none');
        this.svg.appendChild(this.svgText);

        this.svgDefs = document.createElementNS(this.xmlns, 'defs')
        this.svg.appendChild(this.svgDefs);

        this.touches = [];
        this.noise = options.noise || 0;
        document.body.addEventListener('touchstart', this.touchHandler);
        document.body.addEventListener('touchmove', this.touchHandler);
        document.body.addEventListener('touchend', this.clearHandler);
        document.body.addEventListener('touchcancel', this.clearHandler);
        this.svg.addEventListener('mousemove', this.mouseHandler);
        this.svg.addEventListener('mouseout', this.clearHandler);
        this.initOrigins();
        this.animate();
      }

      get mouseHandler() {
        return (e) => {
          this.touches = [{
            x: e.offsetX,
            y: e.offsetY,
            force: 1,
          }];
        };
      }

      get touchHandler() {
        return (e) => {
          this.touches = [];
          const rect = this.svg.getBoundingClientRect();
          for (let touchIndex = 0; touchIndex < e.changedTouches.length; touchIndex++) {
            const touch = e.changedTouches[touchIndex];
            const x = touch.pageX - rect.left;
            const y = touch.pageY - rect.top;
            if (x > 0 && y > 0 && x < this.svgWidth && y < this.svgHeight) {
              this.touches.push({
                x,
                y,
                force: touch.force || 1
              });
            }
          }
          e.preventDefault();
        };
      }

      get clearHandler() {
        return (e) => {
          this.touches = [];
        };
      }

      get raf() {
        return this.__raf || (this.__raf = (
          window.requestAnimationFrame ||
          window.webkitRequestAnimationFrame ||
          window.mozRequestAnimationFrame ||
          function(callback) {
            setTimeout(callback, 10)
          }
        ).bind(window));
      }

      distance(p1, p2) {
        return Math.sqrt(Math.pow(p1.x - p2.x, 2) + Math.pow(p1.y - p2.y, 2));
      }

      update() {
        for (let layerIndex = 0; layerIndex < this.layers.length; layerIndex++) {
          const layer = this.layers[layerIndex];
          const points = layer.points;
          for (let pointIndex = 0; pointIndex < points.length; pointIndex++) {
            const point = points[pointIndex];
            const dx = point.ox - point.x + (Math.random() - 0.5) * this.noise;
            const dy = point.oy - point.y + (Math.random() - 0.5) * this.noise;
            const d = Math.sqrt(dx * dx + dy * dy);
            const f = d * this.forceFactor;
            point.vx += f * ((dx / d) || 0);
            point.vy += f * ((dy / d) || 0);
            for (let touchIndex = 0; touchIndex < this.touches.length; touchIndex++) {
              const touch = this.touches[touchIndex];
              let mouseForce = layer.mouseForce;
              if (
                touch.x > this.margin &&
                touch.x < this.margin + this.width &&
                touch.y > this.margin &&
                touch.y < this.margin + this.height
              ) {
                mouseForce *= -this.hoverFactor;
              }
              const mx = point.x - touch.x;
              const my = point.y - touch.y;
              const md = Math.sqrt(mx * mx + my * my);
              const mf = Math.max(-layer.forceLimit, Math.min(layer.forceLimit, (mouseForce * touch.force) / md));
              point.vx += mf * ((mx / md) || 0);
              point.vy += mf * ((my / md) || 0);
            }
            point.vx *= layer.viscosity;
            point.vy *= layer.viscosity;
            point.x += point.vx;
            point.y += point.vy;
          }
          for (let pointIndex = 0; pointIndex < points.length; pointIndex++) {
            const prev = points[(pointIndex + points.length - 1) % points.length];
            const point = points[pointIndex];
            const next = points[(pointIndex + points.length + 1) % points.length];
            const dPrev = this.distance(point, prev);
            const dNext = this.distance(point, next);

            const line = {
              x: next.x - prev.x,
              y: next.y - prev.y,
            };
            const dLine = Math.sqrt(line.x * line.x + line.y * line.y);

            point.cPrev = {
              x: point.x - (line.x / dLine) * dPrev * this.tension,
              y: point.y - (line.y / dLine) * dPrev * this.tension,
            };
            point.cNext = {
              x: point.x + (line.x / dLine) * dNext * this.tension,
              y: point.y + (line.y / dLine) * dNext * this.tension,
            };
          }
        }
      }

      animate() {
        this.raf(() => {
          this.update();
          this.draw();
          this.animate();
        });
      }

      get svgWidth() {
        return this.width + this.margin * 2;
      }

      get svgHeight() {
        return this.height + this.margin * 2;
      }

      draw() {
        for (let layerIndex = 0; layerIndex < this.layers.length; layerIndex++) {
          const layer = this.layers[layerIndex];
          if (layerIndex === 1) {
            if (this.touches.length > 0) {
              while (this.svgDefs.firstChild) {
                this.svgDefs.removeChild(this.svgDefs.firstChild);
              }
              for (let touchIndex = 0; touchIndex < this.touches.length; touchIndex++) {
                const touch = this.touches[touchIndex];
                const gradient = document.createElementNS(this.xmlns, 'radialGradient');
                gradient.id = 'liquid-gradient-' + this.id + '-' + touchIndex;
                const start = document.createElementNS(this.xmlns, 'stop');
                start.setAttribute('stop-color', this.color3);
                start.setAttribute('offset', '0%');
                const stop = document.createElementNS(this.xmlns, 'stop');
                stop.setAttribute('stop-color', this.color2);
                stop.setAttribute('offset', '100%');
                gradient.appendChild(start);
                gradient.appendChild(stop);
                this.svgDefs.appendChild(gradient);
                gradient.setAttribute('cx', touch.x / this.svgWidth);
                gradient.setAttribute('cy', touch.y / this.svgHeight);
                gradient.setAttribute('r', touch.force);
                layer.path.style.fill = 'url(#' + gradient.id + ')';
              }
            } else {
              layer.path.style.fill = this.color2;
            }
          } else {
            layer.path.style.fill = this.color1;
          }
          const points = layer.points;
          const commands = [];
          commands.push('M', points[0].x, points[0].y);
          for (let pointIndex = 1; pointIndex < points.length; pointIndex += 1) {
            commands.push('C',
              points[(pointIndex + 0) % points.length].cNext.x,
              points[(pointIndex + 0) % points.length].cNext.y,
              points[(pointIndex + 1) % points.length].cPrev.x,
              points[(pointIndex + 1) % points.length].cPrev.y,
              points[(pointIndex + 1) % points.length].x,
              points[(pointIndex + 1) % points.length].y
            );
          }
          commands.push('Z');
          layer.path.setAttribute('d', commands.join(' '));
        }
        this.svgText.textContent = this.text;
        this.svgText.style.fill = this.textColor;
      }

      createPoint(x, y) {
        return {
          x: x,
          y: y,
          ox: x,
          oy: y,
          vx: 0,
          vy: 0,
        };
      }

      initOrigins() {
        this.svg.setAttribute('width', this.svgWidth);
        this.svg.setAttribute('height', this.svgHeight);
        for (let layerIndex = 0; layerIndex < this.layers.length; layerIndex++) {
          const layer = this.layers[layerIndex];
          const points = [];
          for (let x = ~~(this.height / 2); x < this.width - ~~(this.height / 2); x += this.gap) {
            points.push(this.createPoint(
              x + this.margin,
              this.margin
            ));
          }
          for (let alpha = ~~(this.height * 1.25); alpha >= 0; alpha -= this.gap) {
            const angle = (Math.PI / ~~(this.height * 1.25)) * alpha;
            points.push(this.createPoint(
              Math.sin(angle) * this.height / 2 + this.margin + this.width - this.height / 2,
              Math.cos(angle) * this.height / 2 + this.margin + this.height / 2
            ));
          }
          for (let x = this.width - ~~(this.height / 2) - 1; x >= ~~(this.height / 2); x -= this.gap) {
            points.push(this.createPoint(
              x + this.margin,
              this.margin + this.height
            ));
          }
          for (let alpha = 0; alpha <= ~~(this.height * 1.25); alpha += this.gap) {
            const angle = (Math.PI / ~~(this.height * 1.25)) * alpha;
            points.push(this.createPoint(
              (this.height - Math.sin(angle) * this.height / 2) + this.margin - this.height / 2,
              Math.cos(angle) * this.height / 2 + this.margin + this.height / 2
            ));
          }
          layer.points = points;
        }
      }
    }


    const redraw = () => {
      button.initOrigins();
    };

    const buttons = document.getElementsByClassName('liquid-button');
    for (let buttonIndex = 0; buttonIndex < buttons.length; buttonIndex++) {
      const button = buttons[buttonIndex];
      button.liquidButton = new LiquidButton(button);
    }

    var btn = document.querySelector('.btn');
    var btnback = document.querySelector('.btn-back');

    var btnFront = btn.querySelector('.btn-front'),
      btnYes = btn.querySelector('.btn-back .yes'),
      btnNo = btn.querySelector('.btn-back .no');

    btnFront.addEventListener('click', function(event) {
      var intro = document.getElementById('intro');
      intro.style.top = 0;
      var logo = document.getElementById('logo');
      logo.style.display = 'none';
      btnback.style.display = 'block';
      var mx = event.clientX - btn.offsetLeft,
        my = event.clientY - btn.offsetTop;

      var w = btn.offsetWidth,
        h = btn.offsetHeight;

      var directions = [{
          id: 'top',
          x: w / 2,
          y: 0
        },
        {
          id: 'right',
          x: w,
          y: h / 2
        },
        {
          id: 'bottom',
          x: w / 2,
          y: h
        },
        {
          id: 'left',
          x: 0,
          y: h / 2
        }
      ];

      directions.sort(function(a, b) {
        return distance(mx, my, a.x, a.y) - distance(mx, my, b.x, b.y);
      });

      btn.setAttribute('data-direction', directions.shift().id);
      btn.classList.add('is-open');

    });

    var video = document.getElementById('myVideo');
    window.onload = () => video.play();




    function distance(x1, y1, x2, y2) {
      var dx = x1 - x2;
      var dy = y1 - y2;
      return Math.sqrt(dx * dx + dy * dy);
    }

    var colors = new Array(
      [62, 35, 255], [60, 255, 60], [255, 35, 98], [45, 175, 230], [255, 0, 255], [255, 128, 0]);

    var step = 0;
    //color table indices for:
    // current color left
    // next color left
    // current color right
    // next color right
    var colorIndices = [0, 1, 2, 3];

    //transition speed
    var gradientSpeed = 0.002;

    function updateGradient() {

      if ($ === undefined) return;

      var c0_0 = colors[colorIndices[0]];
      var c0_1 = colors[colorIndices[1]];
      var c1_0 = colors[colorIndices[2]];
      var c1_1 = colors[colorIndices[3]];

      var istep = 1 - step;
      var r1 = Math.round(istep * c0_0[0] + step * c0_1[0]);
      var g1 = Math.round(istep * c0_0[1] + step * c0_1[1]);
      var b1 = Math.round(istep * c0_0[2] + step * c0_1[2]);
      var color1 = "rgb(" + r1 + "," + g1 + "," + b1 + ")";

      var r2 = Math.round(istep * c1_0[0] + step * c1_1[0]);
      var g2 = Math.round(istep * c1_0[1] + step * c1_1[1]);
      var b2 = Math.round(istep * c1_0[2] + step * c1_1[2]);
      var color2 = "rgb(" + r2 + "," + g2 + "," + b2 + ")";

      $('#gradient').css({
        background: "-webkit-gradient(linear, left top, right top, from(" + color1 + "), to(" + color2 + "))"
      }).css({
        background: "-moz-linear-gradient(left, " + color1 + " 0%, " + color2 + " 100%)"
      });

      step += gradientSpeed;
      if (step >= 1) {
        step %= 1;
        colorIndices[0] = colorIndices[1];
        colorIndices[2] = colorIndices[3];

        //pick two new target color indices
        //do not pick the same as the current one
        colorIndices[1] = (colorIndices[1] + Math.floor(1 + Math.random() * (colors.length - 1))) % colors.length;
        colorIndices[3] = (colorIndices[3] + Math.floor(1 + Math.random() * (colors.length - 1))) % colors.length;

      }
    }
    var video = document.getElementById("myVideo");
    window.onload = () => video.play();
    setInterval(updateGradient, 2);
  </script>
  <script>
            // can be updated to fetch JSON data from the server
            var member_ct_arr = {
                "1001": [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16],
                "1002": [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25],
                "1003": [1],
                "1004": [4],
                "1005": [4],
                "1006": [2],
                "1007": [1],
                "1008": [4],
                "1009": [1],
                "1010": [1],
                "1011": [1],
                "1012": [5],
                "1013": [1],
                "1014": [1],
                "1015": [1],
                "1016": [1],
                "1017": [1],
                "1018": [1]
            };

            //jQuery time
            var current_fs, next_fs, previous_fs; //fieldsets
            var left, opacity, scale; //fieldset properties which we will animate
            var animating; //flag to prevent quick multi-click glitches
            var members = 0;

            $(document).on("click", "#next_1", function() {

                if (validateForm1()) {

                    if (members != 1) {
                        animate_to_2(this);
                    } else {
                        // go to step 3

                        animate_to_3(this, $(this).parent().next().next());
                    }
                }
            });

            function animate_to_2(thise) {
                if (animating) return false;
                animating = true;

                current_fs = $(thise).parent();
                next_fs = $(thise).parent().next();

                //activate next step on progressbar using the index of next_fs
                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");

                //show the next fieldset
                next_fs.show();
                //hide the current fieldset with style
                current_fs.animate({
                    opacity: 0
                }, {
                    step: function(now, mx) {
                        //as the opacity of current_fs reduces to 0 - stored in "now"
                        //1. scale current_fs down to 80%
                        scale = 1 - (1 - now) * 0.2;
                        //2. bring next_fs from the right(50%)
                        left = (now * 90) + "%";
                        //3. increase opacity of next_fs to 1 as it moves in
                        opacity = 1 - now;
                        current_fs.css({
                            'transform': 'scale(' + scale + ')',
                            'position': 'absolute'
                        });
                        next_fs.css({
                            'left': left,
                            'opacity': opacity
                        });
                    },
                    duration: 0,
                    complete: function() {
                        current_fs.hide();
                        animating = false;
                    },
                    //this comes from the custom easing plugin
                    easing: 'easeInOutBack'
                });
                // get number of team members

                //var sel = document.getElementById('member_select');
                var sel = $('#member_select').val();

              //  var curSel = sel.options[sel.selectedIndex].text;
                var total = sel;
                var countCl = $('.spnClass').length;

                if((total-1)<countCl){
                  for(jj=total;jj<=countCl;jj++){
                    $( "#spanId"+jj ).remove();
                  }
                  return false;
                }

                // generate appropriate dynamic elements to fetch username, email id, contact
                ii=1;
                if(total>countCl){
                    ii=countCl+1;
                }

                for (var i = ii; i < total; i++) {
                    $("#g-value-mem").append(
                        "<span class='spnClass' id='spanId"+i+"'><input type='text' name='teamName" + i + "' id='teamName" + i + "' placeholder='Member " + i + "' class='full-member' />" + "<input type='text' name='teamPhoneNumber" + i + "' id='teamPhoneNumber" + i + "' placeholder='Mobile Number (10 Digits Only)' class='full-member'/>" + "<input type='email' name='teamemailId" + i + "' id='teamemailId" + i + "' placeholder='Email' class='full-member' /></span>");
                }
            }

            $(document).on("click", "#previous1", function() {
                  $("#fieldSet_2").css('opacity', '0');
                  $("#fieldSet_1").css('width', '90%');
                  $("#fieldSet_1").css('opacity', '1');
                  $("#fieldSet_1").css("display", "block");
                  $("#fieldSet_1").css("left", "0");
                  $("#fieldSet_1").css("position", "relative");
                  $("#fieldSet_1").css("transform", "scale(1)");
                  animating = false;
            });

            $(document).on("click", "#previous2", function() {
                  $("#fieldSet_3").css('opacity', '0');
                  if($("#member_select").val()>1){
                      $("#fieldSet_2").css('opacity', '1');
                      $("#fieldSet_2").css('width', '90%');
                      $("#fieldSet_2").css("display", "block");
                      $("#fieldSet_2").css("left", "0");
                      $("#fieldSet_2").css("position", "relative");
                      $("#fieldSet_2").css("transform", "scale(1)");
                      animating = false;
                  }
                  else{
                      $("#fieldSet_1").css('opacity', '1');
                      $("#fieldSet_1").css('width', '90%');
                      $("#fieldSet_1").css("display", "block");
                      $("#fieldSet_1").css("left", "0");
                      $("#fieldSet_1").css("position", "relative");
                      $("#fieldSet_1").css("transform", "scale(1)");
                      animating = false;
                  }
            });



            $(document).on("click", "#next_2", function() {
                if (validateForm2()) {
                    document.getElementById('member_error').style.display = 'none';
                    animate_to_3(this, $(this).parent().next());
                }
                else {
                    document.getElementById('member_error').style.display = 'block';
                }
            });

            function animate_to_3(thise, nexte) {
                if (animating) return false;
                animating = true;

                current_fs = $(thise).parent();
                next_fs = nexte;

                //activate next step on progressbar using the index of next_fs
                $("#progressbar li").eq($("fieldset").index(next_fs)).addClass("active");

                //show the next fieldset
                next_fs.show();
                //hide the current fieldset with style
                current_fs.animate({
                    opacity: 0
                }, {
                    step: function(now, mx) {
                        //as the opacity of current_fs reduces to 0 - stored in "now"
                        //1. scale current_fs down to 80%
                        scale = 1 - (1 - now) * 0.2;
                        //2. bring next_fs from the right(50%)
                        left = (now * 90) + "%";
                        //3. increase opacity of next_fs to 1 as it moves in
                        opacity = 1 - now;
                        current_fs.css({
                            'transform': 'scale(' + scale + ')',
                            'position': 'absolute'
                        });
                        next_fs.css({
                            'left': left,
                            'opacity': opacity
                        });
                    },
                    duration: 0,
                    complete: function() {
                        current_fs.hide();
                        animating = false;
                    },
                    //this comes from the custom easing plugin
                    easing: 'easeInOutBack'
                });
            }

           /* $(document).on("click", ".previous", function() {
                if (animating) return false;
                animating = true;

                ctr--;
                current_fs = $(this).parent();
                previous_fs = $(this).parent().prev();

                //de-activate current step on progressbar
                $("#progressbar li").eq($("fieldset").index(current_fs)).removeClass("active");

                //show the previous fieldset
                previous_fs.show();
                //hide the current fieldset with style
                current_fs.animate({
                    opacity: 0
                }, {
                    step: function(now, mx) {
                        //as the opacity of current_fs reduces to 0 - stored in "now"
                        //1. scale previous_fs from 80% to 100%
                        scale = 0.8; + (1 - now) * 0.2;
                        //2. take current_fs to the right(50%) - from 0%
                        left = ((1 - now) * 50) + "%";
                        //3. increase opacity of previous_fs to 1 as it moves in
                        opacity = 1 - now;
                        current_fs.css({
                            'left': left
                        });
                        previous_fs.css({
                            'transform': 'scale(' + scale + ')',
                            'opacity': opacity
                        });
                    },
                    duration: 0,
                    complete: function() {
                        current_fs.hide();
                        animating = false;
                    },
                    //this comes from the custom easing plugin
                    easing: 'easeInOutBack'
                });
            });    */

            $(".submit").click(function() {
                return false;
            })

            function nvalidation() {
                var name = document.getElementById('name').value;
                var chars = /^[a-zA-Z-, ]+$/;
                if (!name.match(chars)) {
                    document.getElementById('name_error').style.display = "block";
                    return false
                } else {
                    document.getElementById('name_error').style.display = "none";
                    return true
                }
            }

            function fnvalidation() {
                var fname = document.getElementById('fname').value;
                var chars = /^[a-zA-Z-, ]+$/;
                if (!fname.match(chars)) {
                    document.getElementById('fname_error').style.display = "block";
                    return false
                } else {
                    document.getElementById('fname_error').style.display = "none";
                    return true
                }
            }

            function cnvalidation() {
                var cname = document.getElementById('college').value;
                var chars = /^[a-zA-Z-, ]+$/;
                if (!cname.match(chars)) {
                    document.getElementById('cname_error').style.display = "block";
                    return false
                } else {
                    document.getElementById('cname_error').style.display = "none";
                    return true
                }
            }

            function email_val() {
                var str = document.getElementById('email').value;
                var indexofat = str.lastIndexOf('@');
                var indexofdot = str.lastIndexOf('.');

                if (indexofat < 0) {
                    document.getElementById('email_error').style.display = "Block";
                    return false
                } else if (indexofat > indexofdot) {
                    document.getElementById('email_error').style.display = "Block";
                    return false
                } else {
                    document.getElementById('email_error').style.display = "None";
                    return true
                }
            }

            function mob_val() {
                var mob = document.getElementById('phone').value;
                var chars = /^[0-9]+$/;
                if ((mob.length < 10) || (mob.length > 10)) {
                    document.getElementById('mob_error').style.display = "Block";
                    return false
                } else if (!mob.match(chars)) {
                    document.getElementById('mob_error').style.display = "Block";
                    return false
                } else {
                    document.getElementById('mob_error').style.display = "None";
                    return true
                }
            }

            function event_validation() {
                var events = document.getElementById("evento");
                var event_val = events.options[events.selectedIndex].value;

                if (event_val === "") {
                    document.getElementById('event_error').style.display = "Block";
                    document.getElementById('member_ct_outer').style.display = "none";
                    return false
                } else {
                    document.getElementById('event_error').style.display = "none";
                    document.getElementById('member_ct_outer').style.display = "Block";
                    var mySelect = document.getElementById('member_select');
                    mySelect.innerHTML="";

                    members = member_ct_arr[event_val];
                    if (members.length == 1 && members[0] === 1) {
                        var newOption = document.createElement("option");
                        newOption.text = members[0];
                        newOption.value = members[0];
                        mySelect.add(newOption, 0);
                    } else {
                        for (var i = 0; i < members.length; i++) {
                            var newOption = document.createElement("option");
                            newOption.text = members[i];
                            newOption.value = members[i];
                            mySelect.add(newOption, i);
                        }
                    }
                    return true
                }
            }

            function validateForm1() {
                var check = (nvalidation() && fnvalidation() && email_val() && mob_val() && cnvalidation()) ? true : false;
                return check;
            }

            function acc_vis() {
                var accomodation = document.getElementsByName('accomodation').value;

                if (document.getElementById('acc1').checked == true) {
                    document.getElementById('days').style.display = "Block";
                    document.getElementById('people').style.display = "Block";
                } else {
                    document.getElementById('days').style.display = "None";
                    document.getElementById('people').style.display = "None";
                }
            }

            function validateForm2() {
                var mem_sel = $("#member_select").val().trim();
                if (mem_sel == 1) {
                    return true;
                } else {
                    // do cool dynamic validation stuff here
                    /*for(var i = 1; i < mem_sel; i++) {
                        var name_id = 'teamName' + i;
                        var mail_id = 'teamemailId' + i;
                        var cell_id = 'teamPhoneNumber' + i;

                        var name = document.getElementById(name_id).value;

                        var chars = /^[a-zA-Z-, ]+$/;
                        if (!name.match(chars)) {
                            $("#"+name_id).focus();
                            return false
                        }

                        var mob = document.getElementById(cell_id).value;
                        var chars = /^[0-9]+$/;
                        if ((mob.length < 10) || (mob.length > 10)) {
                            $("#"+cell_id).focus();
                            return false
                        } else if (!mob.match(chars)) {
                            $("#"+cell_id).focus();
                            return false
                        }

                        var str = document.getElementById(mail_id).value;
                        var indexofat = str.lastIndexOf('@');
                        var indexofdot = str.lastIndexOf('.');

                        if (indexofat < 0) {
                            $("#"+mail_id).focus();
                            return false
                        } else if (indexofat > indexofdot) {
                            $("#"+mail_id).focus();
                            return false
                        }
                    }
					*/
                    return true;
                }
            }

            function validateForm() {
                var check = (nvalidation() && fnvalidation() && email_val() && mob_val()) ? true : false;
                return check;
            }
        </script>

</body>

</html>
